100 define: k_1
            [The constant 1 function]
            basic 

110 define: id
            [The identity function]
            basic 

120 define: s_tup
            [Single-argument version of suffix tuple]
            basic 

130 define: proj
            [Single-argument version of projection]
            basic 

140 define: add
            [Addition x+y of the two components of input <x.y>]
            basic 

150 define: mul
            [Multiplication x*y of the two components of input <x.y>]
            basic 

160 define: diff
            [Modified difference max(0, x-y) of the two components of input <x.y>]
            basic 

170 define: piggyback_1
            [Pairs up x with 1: <x.1>]
            pair id k_1

180 define: ant
            [The ant function]
            comp diff piggyback_1

190 define: piggyback_ant
            [Pairs up x with its predecessor]
            pair id ant

200 define: sign
            [Sign: 0 for 0, 1 for the rest]
            comp diff piggyback_ant

210 define: gt
            [x > y in <x.y>]
            comp sign diff

220 define: const_pair_1
            [The constant <1.1> function]
            pair k_1 k_1

230 define: k_0
            [The constant 0 function]
            comp diff const_pair_1

240 define: piggyback_0
            [Pairs up x with 0: <x.0>]
            pair id k_0

250 define: pr_l
            [The pr_l function]
            comp proj piggyback_0

260 define: pr_r
            [The pr_r function]
            comp s_tup piggyback_1

270 define: swap
            [From <x.y> to <y.x>]
            pair pr_r pr_l

280 define: swap_diff
            [diff(<y.x>)]
            comp diff swap

290 define: lt
            [x < y in <x.y>]
            comp sign swap_diff

300 define: both_compar
            [Pair of x < y and x > y]
            pair lt gt

310 define: ineq
            [Different x and y in <x.y>?]
            comp add both_compar

320 define: piggyfront_1
            [Pairs up 1 with x: <1.x>]
            pair k_1 id

330 define: neg
            [Negation: 0 from 1, 1 from 0]
            comp diff piggyfront_1

340 define: eq
            [Is it <x.x>?]
            comp neg ineq

350 define: alt_id
            [Programming id by linear search]
            mu eq

360 define: pr_ll
            [Iterated pr_l]
            comp pr_l pr_l

370 define: pr_rl
            [pr_r on pr_l]
            comp pr_r pr_l

380 define: aux_1
            [Aux 1 for Test_Quotient]
            comp piggyback_1 pr_r

390 define: aux_2
            [Aux 2 for Test_Quotient: pr_r(x)+1]
            comp add aux_1

400 define: aux_3
            [Aux 3 for Test_Quotient]
            pair pr_rl aux_2

410 define: aux_4
            [Aux 4 for Test_Quotient: pr_r(pr_l(y))*(pr_r(y)+1)]
            comp mul aux_3

420 define: aux_5
            [Aux 5 for Test_Quotient]
            pair aux_4 pr_ll

430 define: test_quotient
            [Test_Quotient for mu-division, pr_r(pr_l(y))*(pr_r(y)+1) > pr_l(pr_l(x))]
            comp gt aux_5

440 define: div
            [Quotient of division by linear search]
            mu test_quotient
