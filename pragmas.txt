.pragma extended: True
.pragma output: int / bool / ascii 
.pragma input: int / intseq / none
.pragma main: mainfunctionname


Future:

.pragma cache: all (or what/how? must reach down to cantorpairs...)
.pragma output: intseq

. name aliasing (PENDING)

variantes...
 (process?)
 (filter como caso particular?) 
 (inttup?)
 (ascii_input?)

[move future plans to issues, also the cantorpairs import]

====

extended makes up for:
. name aliasing (PENDING)
. primrec scheme
. compair scheme
. arbitrary constant functions k_1234567 (constant given as string for now)

output: ascii cuts in characters of 8 bits (or maybe 7) the binary 
value of the output and joins their chr version (ancillary functions 
to translate back and forth would be useful)

main defines one of the function in the script as the one to be externally called

cache: all caches all cantorpair computations, saves the time for the
arithmetic but may require about 10GB for fact(4) under extended: False

100 define funcname [what is it] pair: k_1 k_1

Errors, nonfatal:

- nickname redefined
- import from extended
- use primrec/compair/ascii_const out of extended
- unknown pragma value

Errors, fatal:

- unknown definition method (careful with "basic" which is like unknown but is known)
- undefined nickname employed (in check_names)

